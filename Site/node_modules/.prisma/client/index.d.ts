
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model utilisateurs
 * 
 */
export type utilisateurs = $Result.DefaultSelection<Prisma.$utilisateursPayload>
/**
 * Model groupe
 * 
 */
export type groupe = $Result.DefaultSelection<Prisma.$groupePayload>
/**
 * Model rappels
 * 
 */
export type rappels = $Result.DefaultSelection<Prisma.$rappelsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilisateurs
 * const utilisateurs = await prisma.utilisateurs.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilisateurs
   * const utilisateurs = await prisma.utilisateurs.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.utilisateurs`: Exposes CRUD operations for the **utilisateurs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateurs.findMany()
    * ```
    */
  get utilisateurs(): Prisma.utilisateursDelegate<ExtArgs>;

  /**
   * `prisma.groupe`: Exposes CRUD operations for the **groupe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groupes
    * const groupes = await prisma.groupe.findMany()
    * ```
    */
  get groupe(): Prisma.groupeDelegate<ExtArgs>;

  /**
   * `prisma.rappels`: Exposes CRUD operations for the **rappels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rappels
    * const rappels = await prisma.rappels.findMany()
    * ```
    */
  get rappels(): Prisma.rappelsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    utilisateurs: 'utilisateurs',
    groupe: 'groupe',
    rappels: 'rappels'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'utilisateurs' | 'groupe' | 'rappels'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      utilisateurs: {
        payload: Prisma.$utilisateursPayload<ExtArgs>
        fields: Prisma.utilisateursFieldRefs
        operations: {
          findUnique: {
            args: Prisma.utilisateursFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.utilisateursFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>
          }
          findFirst: {
            args: Prisma.utilisateursFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.utilisateursFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>
          }
          findMany: {
            args: Prisma.utilisateursFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>[]
          }
          create: {
            args: Prisma.utilisateursCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>
          }
          createMany: {
            args: Prisma.utilisateursCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.utilisateursDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>
          }
          update: {
            args: Prisma.utilisateursUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>
          }
          deleteMany: {
            args: Prisma.utilisateursDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.utilisateursUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.utilisateursUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilisateursPayload>
          }
          aggregate: {
            args: Prisma.UtilisateursAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUtilisateurs>
          }
          groupBy: {
            args: Prisma.utilisateursGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UtilisateursGroupByOutputType>[]
          }
          count: {
            args: Prisma.utilisateursCountArgs<ExtArgs>,
            result: $Utils.Optional<UtilisateursCountAggregateOutputType> | number
          }
        }
      }
      groupe: {
        payload: Prisma.$groupePayload<ExtArgs>
        fields: Prisma.groupeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.groupeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.groupeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>
          }
          findFirst: {
            args: Prisma.groupeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.groupeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>
          }
          findMany: {
            args: Prisma.groupeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>[]
          }
          create: {
            args: Prisma.groupeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>
          }
          createMany: {
            args: Prisma.groupeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.groupeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>
          }
          update: {
            args: Prisma.groupeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>
          }
          deleteMany: {
            args: Prisma.groupeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.groupeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.groupeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$groupePayload>
          }
          aggregate: {
            args: Prisma.GroupeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGroupe>
          }
          groupBy: {
            args: Prisma.groupeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GroupeGroupByOutputType>[]
          }
          count: {
            args: Prisma.groupeCountArgs<ExtArgs>,
            result: $Utils.Optional<GroupeCountAggregateOutputType> | number
          }
        }
      }
      rappels: {
        payload: Prisma.$rappelsPayload<ExtArgs>
        fields: Prisma.rappelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rappelsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rappelsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>
          }
          findFirst: {
            args: Prisma.rappelsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rappelsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>
          }
          findMany: {
            args: Prisma.rappelsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>[]
          }
          create: {
            args: Prisma.rappelsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>
          }
          createMany: {
            args: Prisma.rappelsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.rappelsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>
          }
          update: {
            args: Prisma.rappelsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>
          }
          deleteMany: {
            args: Prisma.rappelsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.rappelsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.rappelsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rappelsPayload>
          }
          aggregate: {
            args: Prisma.RappelsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRappels>
          }
          groupBy: {
            args: Prisma.rappelsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RappelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.rappelsCountArgs<ExtArgs>,
            result: $Utils.Optional<RappelsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilisateursCountOutputType
   */

  export type UtilisateursCountOutputType = {
    Groupes_rejoints: number
    Groupes_crees: number
    rappels: number
  }

  export type UtilisateursCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Groupes_rejoints?: boolean | UtilisateursCountOutputTypeCountGroupes_rejointsArgs
    Groupes_crees?: boolean | UtilisateursCountOutputTypeCountGroupes_creesArgs
    rappels?: boolean | UtilisateursCountOutputTypeCountRappelsArgs
  }

  // Custom InputTypes

  /**
   * UtilisateursCountOutputType without action
   */
  export type UtilisateursCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilisateursCountOutputType
     */
    select?: UtilisateursCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UtilisateursCountOutputType without action
   */
  export type UtilisateursCountOutputTypeCountGroupes_rejointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupeWhereInput
  }


  /**
   * UtilisateursCountOutputType without action
   */
  export type UtilisateursCountOutputTypeCountGroupes_creesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupeWhereInput
  }


  /**
   * UtilisateursCountOutputType without action
   */
  export type UtilisateursCountOutputTypeCountRappelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rappelsWhereInput
  }



  /**
   * Count Type GroupeCountOutputType
   */

  export type GroupeCountOutputType = {
    Rappel: number
    Membres: number
  }

  export type GroupeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rappel?: boolean | GroupeCountOutputTypeCountRappelArgs
    Membres?: boolean | GroupeCountOutputTypeCountMembresArgs
  }

  // Custom InputTypes

  /**
   * GroupeCountOutputType without action
   */
  export type GroupeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupeCountOutputType
     */
    select?: GroupeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GroupeCountOutputType without action
   */
  export type GroupeCountOutputTypeCountRappelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rappelsWhereInput
  }


  /**
   * GroupeCountOutputType without action
   */
  export type GroupeCountOutputTypeCountMembresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: utilisateursWhereInput
  }



  /**
   * Models
   */

  /**
   * Model utilisateurs
   */

  export type AggregateUtilisateurs = {
    _count: UtilisateursCountAggregateOutputType | null
    _min: UtilisateursMinAggregateOutputType | null
    _max: UtilisateursMaxAggregateOutputType | null
  }

  export type UtilisateursMinAggregateOutputType = {
    prenom: string | null
    nom: string | null
    email: string | null
    password: string | null
  }

  export type UtilisateursMaxAggregateOutputType = {
    prenom: string | null
    nom: string | null
    email: string | null
    password: string | null
  }

  export type UtilisateursCountAggregateOutputType = {
    prenom: number
    nom: number
    email: number
    password: number
    _all: number
  }


  export type UtilisateursMinAggregateInputType = {
    prenom?: true
    nom?: true
    email?: true
    password?: true
  }

  export type UtilisateursMaxAggregateInputType = {
    prenom?: true
    nom?: true
    email?: true
    password?: true
  }

  export type UtilisateursCountAggregateInputType = {
    prenom?: true
    nom?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UtilisateursAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which utilisateurs to aggregate.
     */
    where?: utilisateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilisateurs to fetch.
     */
    orderBy?: utilisateursOrderByWithRelationInput | utilisateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: utilisateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned utilisateurs
    **/
    _count?: true | UtilisateursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateursMaxAggregateInputType
  }

  export type GetUtilisateursAggregateType<T extends UtilisateursAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateurs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateurs[P]>
      : GetScalarType<T[P], AggregateUtilisateurs[P]>
  }




  export type utilisateursGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: utilisateursWhereInput
    orderBy?: utilisateursOrderByWithAggregationInput | utilisateursOrderByWithAggregationInput[]
    by: UtilisateursScalarFieldEnum[] | UtilisateursScalarFieldEnum
    having?: utilisateursScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateursCountAggregateInputType | true
    _min?: UtilisateursMinAggregateInputType
    _max?: UtilisateursMaxAggregateInputType
  }

  export type UtilisateursGroupByOutputType = {
    prenom: string
    nom: string
    email: string
    password: string
    _count: UtilisateursCountAggregateOutputType | null
    _min: UtilisateursMinAggregateOutputType | null
    _max: UtilisateursMaxAggregateOutputType | null
  }

  type GetUtilisateursGroupByPayload<T extends utilisateursGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateursGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateursGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateursGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateursGroupByOutputType[P]>
        }
      >
    >


  export type utilisateursSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    prenom?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    Groupes_rejoints?: boolean | utilisateurs$Groupes_rejointsArgs<ExtArgs>
    Groupes_crees?: boolean | utilisateurs$Groupes_creesArgs<ExtArgs>
    rappels?: boolean | utilisateurs$rappelsArgs<ExtArgs>
    _count?: boolean | UtilisateursCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilisateurs"]>

  export type utilisateursSelectScalar = {
    prenom?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
  }

  export type utilisateursInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Groupes_rejoints?: boolean | utilisateurs$Groupes_rejointsArgs<ExtArgs>
    Groupes_crees?: boolean | utilisateurs$Groupes_creesArgs<ExtArgs>
    rappels?: boolean | utilisateurs$rappelsArgs<ExtArgs>
    _count?: boolean | UtilisateursCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $utilisateursPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "utilisateurs"
    objects: {
      Groupes_rejoints: Prisma.$groupePayload<ExtArgs>[]
      Groupes_crees: Prisma.$groupePayload<ExtArgs>[]
      rappels: Prisma.$rappelsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      prenom: string
      nom: string
      email: string
      password: string
    }, ExtArgs["result"]["utilisateurs"]>
    composites: {}
  }


  type utilisateursGetPayload<S extends boolean | null | undefined | utilisateursDefaultArgs> = $Result.GetResult<Prisma.$utilisateursPayload, S>

  type utilisateursCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<utilisateursFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UtilisateursCountAggregateInputType | true
    }

  export interface utilisateursDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['utilisateurs'], meta: { name: 'utilisateurs' } }
    /**
     * Find zero or one Utilisateurs that matches the filter.
     * @param {utilisateursFindUniqueArgs} args - Arguments to find a Utilisateurs
     * @example
     * // Get one Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends utilisateursFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, utilisateursFindUniqueArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Utilisateurs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {utilisateursFindUniqueOrThrowArgs} args - Arguments to find a Utilisateurs
     * @example
     * // Get one Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends utilisateursFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, utilisateursFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilisateursFindFirstArgs} args - Arguments to find a Utilisateurs
     * @example
     * // Get one Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends utilisateursFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, utilisateursFindFirstArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Utilisateurs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilisateursFindFirstOrThrowArgs} args - Arguments to find a Utilisateurs
     * @example
     * // Get one Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends utilisateursFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, utilisateursFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilisateursFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.findMany({ take: 10 })
     * 
     * // Only select the `prenom`
     * const utilisateursWithPrenomOnly = await prisma.utilisateurs.findMany({ select: { prenom: true } })
     * 
    **/
    findMany<T extends utilisateursFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, utilisateursFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Utilisateurs.
     * @param {utilisateursCreateArgs} args - Arguments to create a Utilisateurs.
     * @example
     * // Create one Utilisateurs
     * const Utilisateurs = await prisma.utilisateurs.create({
     *   data: {
     *     // ... data to create a Utilisateurs
     *   }
     * })
     * 
    **/
    create<T extends utilisateursCreateArgs<ExtArgs>>(
      args: SelectSubset<T, utilisateursCreateArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     *     @param {utilisateursCreateManyArgs} args - Arguments to create many Utilisateurs.
     *     @example
     *     // Create many Utilisateurs
     *     const utilisateurs = await prisma.utilisateurs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends utilisateursCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, utilisateursCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilisateurs.
     * @param {utilisateursDeleteArgs} args - Arguments to delete one Utilisateurs.
     * @example
     * // Delete one Utilisateurs
     * const Utilisateurs = await prisma.utilisateurs.delete({
     *   where: {
     *     // ... filter to delete one Utilisateurs
     *   }
     * })
     * 
    **/
    delete<T extends utilisateursDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, utilisateursDeleteArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Utilisateurs.
     * @param {utilisateursUpdateArgs} args - Arguments to update one Utilisateurs.
     * @example
     * // Update one Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends utilisateursUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, utilisateursUpdateArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {utilisateursDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateurs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends utilisateursDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, utilisateursDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilisateursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends utilisateursUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, utilisateursUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateurs.
     * @param {utilisateursUpsertArgs} args - Arguments to update or create a Utilisateurs.
     * @example
     * // Update or create a Utilisateurs
     * const utilisateurs = await prisma.utilisateurs.upsert({
     *   create: {
     *     // ... data to create a Utilisateurs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateurs we want to update
     *   }
     * })
    **/
    upsert<T extends utilisateursUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, utilisateursUpsertArgs<ExtArgs>>
    ): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilisateursCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateurs.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends utilisateursCountArgs>(
      args?: Subset<T, utilisateursCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateursAggregateArgs>(args: Subset<T, UtilisateursAggregateArgs>): Prisma.PrismaPromise<GetUtilisateursAggregateType<T>>

    /**
     * Group by Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilisateursGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends utilisateursGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: utilisateursGroupByArgs['orderBy'] }
        : { orderBy?: utilisateursGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, utilisateursGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateursGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the utilisateurs model
   */
  readonly fields: utilisateursFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for utilisateurs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__utilisateursClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Groupes_rejoints<T extends utilisateurs$Groupes_rejointsArgs<ExtArgs> = {}>(args?: Subset<T, utilisateurs$Groupes_rejointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findMany'> | Null>;

    Groupes_crees<T extends utilisateurs$Groupes_creesArgs<ExtArgs> = {}>(args?: Subset<T, utilisateurs$Groupes_creesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findMany'> | Null>;

    rappels<T extends utilisateurs$rappelsArgs<ExtArgs> = {}>(args?: Subset<T, utilisateurs$rappelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the utilisateurs model
   */ 
  interface utilisateursFieldRefs {
    readonly prenom: FieldRef<"utilisateurs", 'String'>
    readonly nom: FieldRef<"utilisateurs", 'String'>
    readonly email: FieldRef<"utilisateurs", 'String'>
    readonly password: FieldRef<"utilisateurs", 'String'>
  }
    

  // Custom InputTypes

  /**
   * utilisateurs findUnique
   */
  export type utilisateursFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * Filter, which utilisateurs to fetch.
     */
    where: utilisateursWhereUniqueInput
  }


  /**
   * utilisateurs findUniqueOrThrow
   */
  export type utilisateursFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * Filter, which utilisateurs to fetch.
     */
    where: utilisateursWhereUniqueInput
  }


  /**
   * utilisateurs findFirst
   */
  export type utilisateursFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * Filter, which utilisateurs to fetch.
     */
    where?: utilisateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilisateurs to fetch.
     */
    orderBy?: utilisateursOrderByWithRelationInput | utilisateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for utilisateurs.
     */
    cursor?: utilisateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of utilisateurs.
     */
    distinct?: UtilisateursScalarFieldEnum | UtilisateursScalarFieldEnum[]
  }


  /**
   * utilisateurs findFirstOrThrow
   */
  export type utilisateursFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * Filter, which utilisateurs to fetch.
     */
    where?: utilisateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilisateurs to fetch.
     */
    orderBy?: utilisateursOrderByWithRelationInput | utilisateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for utilisateurs.
     */
    cursor?: utilisateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of utilisateurs.
     */
    distinct?: UtilisateursScalarFieldEnum | UtilisateursScalarFieldEnum[]
  }


  /**
   * utilisateurs findMany
   */
  export type utilisateursFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * Filter, which utilisateurs to fetch.
     */
    where?: utilisateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilisateurs to fetch.
     */
    orderBy?: utilisateursOrderByWithRelationInput | utilisateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing utilisateurs.
     */
    cursor?: utilisateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilisateurs.
     */
    skip?: number
    distinct?: UtilisateursScalarFieldEnum | UtilisateursScalarFieldEnum[]
  }


  /**
   * utilisateurs create
   */
  export type utilisateursCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * The data needed to create a utilisateurs.
     */
    data: XOR<utilisateursCreateInput, utilisateursUncheckedCreateInput>
  }


  /**
   * utilisateurs createMany
   */
  export type utilisateursCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many utilisateurs.
     */
    data: utilisateursCreateManyInput | utilisateursCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * utilisateurs update
   */
  export type utilisateursUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * The data needed to update a utilisateurs.
     */
    data: XOR<utilisateursUpdateInput, utilisateursUncheckedUpdateInput>
    /**
     * Choose, which utilisateurs to update.
     */
    where: utilisateursWhereUniqueInput
  }


  /**
   * utilisateurs updateMany
   */
  export type utilisateursUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update utilisateurs.
     */
    data: XOR<utilisateursUpdateManyMutationInput, utilisateursUncheckedUpdateManyInput>
    /**
     * Filter which utilisateurs to update
     */
    where?: utilisateursWhereInput
  }


  /**
   * utilisateurs upsert
   */
  export type utilisateursUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * The filter to search for the utilisateurs to update in case it exists.
     */
    where: utilisateursWhereUniqueInput
    /**
     * In case the utilisateurs found by the `where` argument doesn't exist, create a new utilisateurs with this data.
     */
    create: XOR<utilisateursCreateInput, utilisateursUncheckedCreateInput>
    /**
     * In case the utilisateurs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<utilisateursUpdateInput, utilisateursUncheckedUpdateInput>
  }


  /**
   * utilisateurs delete
   */
  export type utilisateursDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    /**
     * Filter which utilisateurs to delete.
     */
    where: utilisateursWhereUniqueInput
  }


  /**
   * utilisateurs deleteMany
   */
  export type utilisateursDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which utilisateurs to delete
     */
    where?: utilisateursWhereInput
  }


  /**
   * utilisateurs.Groupes_rejoints
   */
  export type utilisateurs$Groupes_rejointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    where?: groupeWhereInput
    orderBy?: groupeOrderByWithRelationInput | groupeOrderByWithRelationInput[]
    cursor?: groupeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }


  /**
   * utilisateurs.Groupes_crees
   */
  export type utilisateurs$Groupes_creesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    where?: groupeWhereInput
    orderBy?: groupeOrderByWithRelationInput | groupeOrderByWithRelationInput[]
    cursor?: groupeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }


  /**
   * utilisateurs.rappels
   */
  export type utilisateurs$rappelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    where?: rappelsWhereInput
    orderBy?: rappelsOrderByWithRelationInput | rappelsOrderByWithRelationInput[]
    cursor?: rappelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RappelsScalarFieldEnum | RappelsScalarFieldEnum[]
  }


  /**
   * utilisateurs without action
   */
  export type utilisateursDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
  }



  /**
   * Model groupe
   */

  export type AggregateGroupe = {
    _count: GroupeCountAggregateOutputType | null
    _min: GroupeMinAggregateOutputType | null
    _max: GroupeMaxAggregateOutputType | null
  }

  export type GroupeMinAggregateOutputType = {
    nom: string | null
    email_createur: string | null
  }

  export type GroupeMaxAggregateOutputType = {
    nom: string | null
    email_createur: string | null
  }

  export type GroupeCountAggregateOutputType = {
    nom: number
    email_createur: number
    _all: number
  }


  export type GroupeMinAggregateInputType = {
    nom?: true
    email_createur?: true
  }

  export type GroupeMaxAggregateInputType = {
    nom?: true
    email_createur?: true
  }

  export type GroupeCountAggregateInputType = {
    nom?: true
    email_createur?: true
    _all?: true
  }

  export type GroupeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which groupe to aggregate.
     */
    where?: groupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupes to fetch.
     */
    orderBy?: groupeOrderByWithRelationInput | groupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: groupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groupes
    **/
    _count?: true | GroupeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupeMaxAggregateInputType
  }

  export type GetGroupeAggregateType<T extends GroupeAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupe[P]>
      : GetScalarType<T[P], AggregateGroupe[P]>
  }




  export type groupeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupeWhereInput
    orderBy?: groupeOrderByWithAggregationInput | groupeOrderByWithAggregationInput[]
    by: GroupeScalarFieldEnum[] | GroupeScalarFieldEnum
    having?: groupeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupeCountAggregateInputType | true
    _min?: GroupeMinAggregateInputType
    _max?: GroupeMaxAggregateInputType
  }

  export type GroupeGroupByOutputType = {
    nom: string
    email_createur: string
    _count: GroupeCountAggregateOutputType | null
    _min: GroupeMinAggregateOutputType | null
    _max: GroupeMaxAggregateOutputType | null
  }

  type GetGroupeGroupByPayload<T extends groupeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupeGroupByOutputType[P]>
            : GetScalarType<T[P], GroupeGroupByOutputType[P]>
        }
      >
    >


  export type groupeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nom?: boolean
    email_createur?: boolean
    Createur?: boolean | utilisateursDefaultArgs<ExtArgs>
    Rappel?: boolean | groupe$RappelArgs<ExtArgs>
    Membres?: boolean | groupe$MembresArgs<ExtArgs>
    _count?: boolean | GroupeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupe"]>

  export type groupeSelectScalar = {
    nom?: boolean
    email_createur?: boolean
  }

  export type groupeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Createur?: boolean | utilisateursDefaultArgs<ExtArgs>
    Rappel?: boolean | groupe$RappelArgs<ExtArgs>
    Membres?: boolean | groupe$MembresArgs<ExtArgs>
    _count?: boolean | GroupeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $groupePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "groupe"
    objects: {
      Createur: Prisma.$utilisateursPayload<ExtArgs>
      Rappel: Prisma.$rappelsPayload<ExtArgs>[]
      Membres: Prisma.$utilisateursPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      nom: string
      email_createur: string
    }, ExtArgs["result"]["groupe"]>
    composites: {}
  }


  type groupeGetPayload<S extends boolean | null | undefined | groupeDefaultArgs> = $Result.GetResult<Prisma.$groupePayload, S>

  type groupeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<groupeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GroupeCountAggregateInputType | true
    }

  export interface groupeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['groupe'], meta: { name: 'groupe' } }
    /**
     * Find zero or one Groupe that matches the filter.
     * @param {groupeFindUniqueArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends groupeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, groupeFindUniqueArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Groupe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {groupeFindUniqueOrThrowArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends groupeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, groupeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Groupe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupeFindFirstArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends groupeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, groupeFindFirstArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Groupe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupeFindFirstOrThrowArgs} args - Arguments to find a Groupe
     * @example
     * // Get one Groupe
     * const groupe = await prisma.groupe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends groupeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, groupeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Groupes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groupes
     * const groupes = await prisma.groupe.findMany()
     * 
     * // Get first 10 Groupes
     * const groupes = await prisma.groupe.findMany({ take: 10 })
     * 
     * // Only select the `nom`
     * const groupeWithNomOnly = await prisma.groupe.findMany({ select: { nom: true } })
     * 
    **/
    findMany<T extends groupeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, groupeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Groupe.
     * @param {groupeCreateArgs} args - Arguments to create a Groupe.
     * @example
     * // Create one Groupe
     * const Groupe = await prisma.groupe.create({
     *   data: {
     *     // ... data to create a Groupe
     *   }
     * })
     * 
    **/
    create<T extends groupeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, groupeCreateArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Groupes.
     *     @param {groupeCreateManyArgs} args - Arguments to create many Groupes.
     *     @example
     *     // Create many Groupes
     *     const groupe = await prisma.groupe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends groupeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, groupeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Groupe.
     * @param {groupeDeleteArgs} args - Arguments to delete one Groupe.
     * @example
     * // Delete one Groupe
     * const Groupe = await prisma.groupe.delete({
     *   where: {
     *     // ... filter to delete one Groupe
     *   }
     * })
     * 
    **/
    delete<T extends groupeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, groupeDeleteArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Groupe.
     * @param {groupeUpdateArgs} args - Arguments to update one Groupe.
     * @example
     * // Update one Groupe
     * const groupe = await prisma.groupe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends groupeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, groupeUpdateArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Groupes.
     * @param {groupeDeleteManyArgs} args - Arguments to filter Groupes to delete.
     * @example
     * // Delete a few Groupes
     * const { count } = await prisma.groupe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends groupeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, groupeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groupes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groupes
     * const groupe = await prisma.groupe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends groupeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, groupeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Groupe.
     * @param {groupeUpsertArgs} args - Arguments to update or create a Groupe.
     * @example
     * // Update or create a Groupe
     * const groupe = await prisma.groupe.upsert({
     *   create: {
     *     // ... data to create a Groupe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Groupe we want to update
     *   }
     * })
    **/
    upsert<T extends groupeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, groupeUpsertArgs<ExtArgs>>
    ): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Groupes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupeCountArgs} args - Arguments to filter Groupes to count.
     * @example
     * // Count the number of Groupes
     * const count = await prisma.groupe.count({
     *   where: {
     *     // ... the filter for the Groupes we want to count
     *   }
     * })
    **/
    count<T extends groupeCountArgs>(
      args?: Subset<T, groupeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Groupe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupeAggregateArgs>(args: Subset<T, GroupeAggregateArgs>): Prisma.PrismaPromise<GetGroupeAggregateType<T>>

    /**
     * Group by Groupe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends groupeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: groupeGroupByArgs['orderBy'] }
        : { orderBy?: groupeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, groupeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the groupe model
   */
  readonly fields: groupeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for groupe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__groupeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Createur<T extends utilisateursDefaultArgs<ExtArgs> = {}>(args?: Subset<T, utilisateursDefaultArgs<ExtArgs>>): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Rappel<T extends groupe$RappelArgs<ExtArgs> = {}>(args?: Subset<T, groupe$RappelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Membres<T extends groupe$MembresArgs<ExtArgs> = {}>(args?: Subset<T, groupe$MembresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the groupe model
   */ 
  interface groupeFieldRefs {
    readonly nom: FieldRef<"groupe", 'String'>
    readonly email_createur: FieldRef<"groupe", 'String'>
  }
    

  // Custom InputTypes

  /**
   * groupe findUnique
   */
  export type groupeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * Filter, which groupe to fetch.
     */
    where: groupeWhereUniqueInput
  }


  /**
   * groupe findUniqueOrThrow
   */
  export type groupeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * Filter, which groupe to fetch.
     */
    where: groupeWhereUniqueInput
  }


  /**
   * groupe findFirst
   */
  export type groupeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * Filter, which groupe to fetch.
     */
    where?: groupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupes to fetch.
     */
    orderBy?: groupeOrderByWithRelationInput | groupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groupes.
     */
    cursor?: groupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groupes.
     */
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }


  /**
   * groupe findFirstOrThrow
   */
  export type groupeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * Filter, which groupe to fetch.
     */
    where?: groupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupes to fetch.
     */
    orderBy?: groupeOrderByWithRelationInput | groupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groupes.
     */
    cursor?: groupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groupes.
     */
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }


  /**
   * groupe findMany
   */
  export type groupeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * Filter, which groupes to fetch.
     */
    where?: groupeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupes to fetch.
     */
    orderBy?: groupeOrderByWithRelationInput | groupeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groupes.
     */
    cursor?: groupeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupes.
     */
    skip?: number
    distinct?: GroupeScalarFieldEnum | GroupeScalarFieldEnum[]
  }


  /**
   * groupe create
   */
  export type groupeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * The data needed to create a groupe.
     */
    data: XOR<groupeCreateInput, groupeUncheckedCreateInput>
  }


  /**
   * groupe createMany
   */
  export type groupeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many groupes.
     */
    data: groupeCreateManyInput | groupeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * groupe update
   */
  export type groupeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * The data needed to update a groupe.
     */
    data: XOR<groupeUpdateInput, groupeUncheckedUpdateInput>
    /**
     * Choose, which groupe to update.
     */
    where: groupeWhereUniqueInput
  }


  /**
   * groupe updateMany
   */
  export type groupeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update groupes.
     */
    data: XOR<groupeUpdateManyMutationInput, groupeUncheckedUpdateManyInput>
    /**
     * Filter which groupes to update
     */
    where?: groupeWhereInput
  }


  /**
   * groupe upsert
   */
  export type groupeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * The filter to search for the groupe to update in case it exists.
     */
    where: groupeWhereUniqueInput
    /**
     * In case the groupe found by the `where` argument doesn't exist, create a new groupe with this data.
     */
    create: XOR<groupeCreateInput, groupeUncheckedCreateInput>
    /**
     * In case the groupe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<groupeUpdateInput, groupeUncheckedUpdateInput>
  }


  /**
   * groupe delete
   */
  export type groupeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
    /**
     * Filter which groupe to delete.
     */
    where: groupeWhereUniqueInput
  }


  /**
   * groupe deleteMany
   */
  export type groupeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which groupes to delete
     */
    where?: groupeWhereInput
  }


  /**
   * groupe.Rappel
   */
  export type groupe$RappelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    where?: rappelsWhereInput
    orderBy?: rappelsOrderByWithRelationInput | rappelsOrderByWithRelationInput[]
    cursor?: rappelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RappelsScalarFieldEnum | RappelsScalarFieldEnum[]
  }


  /**
   * groupe.Membres
   */
  export type groupe$MembresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilisateurs
     */
    select?: utilisateursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: utilisateursInclude<ExtArgs> | null
    where?: utilisateursWhereInput
    orderBy?: utilisateursOrderByWithRelationInput | utilisateursOrderByWithRelationInput[]
    cursor?: utilisateursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UtilisateursScalarFieldEnum | UtilisateursScalarFieldEnum[]
  }


  /**
   * groupe without action
   */
  export type groupeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupe
     */
    select?: groupeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: groupeInclude<ExtArgs> | null
  }



  /**
   * Model rappels
   */

  export type AggregateRappels = {
    _count: RappelsCountAggregateOutputType | null
    _min: RappelsMinAggregateOutputType | null
    _max: RappelsMaxAggregateOutputType | null
  }

  export type RappelsMinAggregateOutputType = {
    nom_groupe: string | null
    nom_rappel: string | null
    description: string | null
    date: Date | null
    email_createur: string | null
    time: Date | null
    couleur: string | null
  }

  export type RappelsMaxAggregateOutputType = {
    nom_groupe: string | null
    nom_rappel: string | null
    description: string | null
    date: Date | null
    email_createur: string | null
    time: Date | null
    couleur: string | null
  }

  export type RappelsCountAggregateOutputType = {
    nom_groupe: number
    nom_rappel: number
    description: number
    date: number
    email_createur: number
    time: number
    couleur: number
    _all: number
  }


  export type RappelsMinAggregateInputType = {
    nom_groupe?: true
    nom_rappel?: true
    description?: true
    date?: true
    email_createur?: true
    time?: true
    couleur?: true
  }

  export type RappelsMaxAggregateInputType = {
    nom_groupe?: true
    nom_rappel?: true
    description?: true
    date?: true
    email_createur?: true
    time?: true
    couleur?: true
  }

  export type RappelsCountAggregateInputType = {
    nom_groupe?: true
    nom_rappel?: true
    description?: true
    date?: true
    email_createur?: true
    time?: true
    couleur?: true
    _all?: true
  }

  export type RappelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rappels to aggregate.
     */
    where?: rappelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rappels to fetch.
     */
    orderBy?: rappelsOrderByWithRelationInput | rappelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rappelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rappels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rappels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rappels
    **/
    _count?: true | RappelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RappelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RappelsMaxAggregateInputType
  }

  export type GetRappelsAggregateType<T extends RappelsAggregateArgs> = {
        [P in keyof T & keyof AggregateRappels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRappels[P]>
      : GetScalarType<T[P], AggregateRappels[P]>
  }




  export type rappelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rappelsWhereInput
    orderBy?: rappelsOrderByWithAggregationInput | rappelsOrderByWithAggregationInput[]
    by: RappelsScalarFieldEnum[] | RappelsScalarFieldEnum
    having?: rappelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RappelsCountAggregateInputType | true
    _min?: RappelsMinAggregateInputType
    _max?: RappelsMaxAggregateInputType
  }

  export type RappelsGroupByOutputType = {
    nom_groupe: string
    nom_rappel: string
    description: string
    date: Date
    email_createur: string
    time: Date
    couleur: string
    _count: RappelsCountAggregateOutputType | null
    _min: RappelsMinAggregateOutputType | null
    _max: RappelsMaxAggregateOutputType | null
  }

  type GetRappelsGroupByPayload<T extends rappelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RappelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RappelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RappelsGroupByOutputType[P]>
            : GetScalarType<T[P], RappelsGroupByOutputType[P]>
        }
      >
    >


  export type rappelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nom_groupe?: boolean
    nom_rappel?: boolean
    description?: boolean
    date?: boolean
    email_createur?: boolean
    time?: boolean
    couleur?: boolean
    Groupe?: boolean | groupeDefaultArgs<ExtArgs>
    Createur?: boolean | utilisateursDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rappels"]>

  export type rappelsSelectScalar = {
    nom_groupe?: boolean
    nom_rappel?: boolean
    description?: boolean
    date?: boolean
    email_createur?: boolean
    time?: boolean
    couleur?: boolean
  }

  export type rappelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Groupe?: boolean | groupeDefaultArgs<ExtArgs>
    Createur?: boolean | utilisateursDefaultArgs<ExtArgs>
  }


  export type $rappelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rappels"
    objects: {
      Groupe: Prisma.$groupePayload<ExtArgs>
      Createur: Prisma.$utilisateursPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      nom_groupe: string
      nom_rappel: string
      description: string
      date: Date
      email_createur: string
      time: Date
      couleur: string
    }, ExtArgs["result"]["rappels"]>
    composites: {}
  }


  type rappelsGetPayload<S extends boolean | null | undefined | rappelsDefaultArgs> = $Result.GetResult<Prisma.$rappelsPayload, S>

  type rappelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<rappelsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RappelsCountAggregateInputType | true
    }

  export interface rappelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rappels'], meta: { name: 'rappels' } }
    /**
     * Find zero or one Rappels that matches the filter.
     * @param {rappelsFindUniqueArgs} args - Arguments to find a Rappels
     * @example
     * // Get one Rappels
     * const rappels = await prisma.rappels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rappelsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, rappelsFindUniqueArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rappels that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {rappelsFindUniqueOrThrowArgs} args - Arguments to find a Rappels
     * @example
     * // Get one Rappels
     * const rappels = await prisma.rappels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends rappelsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, rappelsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rappels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rappelsFindFirstArgs} args - Arguments to find a Rappels
     * @example
     * // Get one Rappels
     * const rappels = await prisma.rappels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rappelsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, rappelsFindFirstArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rappels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rappelsFindFirstOrThrowArgs} args - Arguments to find a Rappels
     * @example
     * // Get one Rappels
     * const rappels = await prisma.rappels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends rappelsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, rappelsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rappels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rappelsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rappels
     * const rappels = await prisma.rappels.findMany()
     * 
     * // Get first 10 Rappels
     * const rappels = await prisma.rappels.findMany({ take: 10 })
     * 
     * // Only select the `nom_groupe`
     * const rappelsWithNom_groupeOnly = await prisma.rappels.findMany({ select: { nom_groupe: true } })
     * 
    **/
    findMany<T extends rappelsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, rappelsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rappels.
     * @param {rappelsCreateArgs} args - Arguments to create a Rappels.
     * @example
     * // Create one Rappels
     * const Rappels = await prisma.rappels.create({
     *   data: {
     *     // ... data to create a Rappels
     *   }
     * })
     * 
    **/
    create<T extends rappelsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, rappelsCreateArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rappels.
     *     @param {rappelsCreateManyArgs} args - Arguments to create many Rappels.
     *     @example
     *     // Create many Rappels
     *     const rappels = await prisma.rappels.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends rappelsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, rappelsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rappels.
     * @param {rappelsDeleteArgs} args - Arguments to delete one Rappels.
     * @example
     * // Delete one Rappels
     * const Rappels = await prisma.rappels.delete({
     *   where: {
     *     // ... filter to delete one Rappels
     *   }
     * })
     * 
    **/
    delete<T extends rappelsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, rappelsDeleteArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rappels.
     * @param {rappelsUpdateArgs} args - Arguments to update one Rappels.
     * @example
     * // Update one Rappels
     * const rappels = await prisma.rappels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rappelsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, rappelsUpdateArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rappels.
     * @param {rappelsDeleteManyArgs} args - Arguments to filter Rappels to delete.
     * @example
     * // Delete a few Rappels
     * const { count } = await prisma.rappels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rappelsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, rappelsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rappels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rappelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rappels
     * const rappels = await prisma.rappels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rappelsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, rappelsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rappels.
     * @param {rappelsUpsertArgs} args - Arguments to update or create a Rappels.
     * @example
     * // Update or create a Rappels
     * const rappels = await prisma.rappels.upsert({
     *   create: {
     *     // ... data to create a Rappels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rappels we want to update
     *   }
     * })
    **/
    upsert<T extends rappelsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, rappelsUpsertArgs<ExtArgs>>
    ): Prisma__rappelsClient<$Result.GetResult<Prisma.$rappelsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rappels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rappelsCountArgs} args - Arguments to filter Rappels to count.
     * @example
     * // Count the number of Rappels
     * const count = await prisma.rappels.count({
     *   where: {
     *     // ... the filter for the Rappels we want to count
     *   }
     * })
    **/
    count<T extends rappelsCountArgs>(
      args?: Subset<T, rappelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RappelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rappels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RappelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RappelsAggregateArgs>(args: Subset<T, RappelsAggregateArgs>): Prisma.PrismaPromise<GetRappelsAggregateType<T>>

    /**
     * Group by Rappels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rappelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rappelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rappelsGroupByArgs['orderBy'] }
        : { orderBy?: rappelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rappelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRappelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rappels model
   */
  readonly fields: rappelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rappels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rappelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Groupe<T extends groupeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, groupeDefaultArgs<ExtArgs>>): Prisma__groupeClient<$Result.GetResult<Prisma.$groupePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Createur<T extends utilisateursDefaultArgs<ExtArgs> = {}>(args?: Subset<T, utilisateursDefaultArgs<ExtArgs>>): Prisma__utilisateursClient<$Result.GetResult<Prisma.$utilisateursPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the rappels model
   */ 
  interface rappelsFieldRefs {
    readonly nom_groupe: FieldRef<"rappels", 'String'>
    readonly nom_rappel: FieldRef<"rappels", 'String'>
    readonly description: FieldRef<"rappels", 'String'>
    readonly date: FieldRef<"rappels", 'DateTime'>
    readonly email_createur: FieldRef<"rappels", 'String'>
    readonly time: FieldRef<"rappels", 'DateTime'>
    readonly couleur: FieldRef<"rappels", 'String'>
  }
    

  // Custom InputTypes

  /**
   * rappels findUnique
   */
  export type rappelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * Filter, which rappels to fetch.
     */
    where: rappelsWhereUniqueInput
  }


  /**
   * rappels findUniqueOrThrow
   */
  export type rappelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * Filter, which rappels to fetch.
     */
    where: rappelsWhereUniqueInput
  }


  /**
   * rappels findFirst
   */
  export type rappelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * Filter, which rappels to fetch.
     */
    where?: rappelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rappels to fetch.
     */
    orderBy?: rappelsOrderByWithRelationInput | rappelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rappels.
     */
    cursor?: rappelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rappels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rappels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rappels.
     */
    distinct?: RappelsScalarFieldEnum | RappelsScalarFieldEnum[]
  }


  /**
   * rappels findFirstOrThrow
   */
  export type rappelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * Filter, which rappels to fetch.
     */
    where?: rappelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rappels to fetch.
     */
    orderBy?: rappelsOrderByWithRelationInput | rappelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rappels.
     */
    cursor?: rappelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rappels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rappels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rappels.
     */
    distinct?: RappelsScalarFieldEnum | RappelsScalarFieldEnum[]
  }


  /**
   * rappels findMany
   */
  export type rappelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * Filter, which rappels to fetch.
     */
    where?: rappelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rappels to fetch.
     */
    orderBy?: rappelsOrderByWithRelationInput | rappelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rappels.
     */
    cursor?: rappelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rappels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rappels.
     */
    skip?: number
    distinct?: RappelsScalarFieldEnum | RappelsScalarFieldEnum[]
  }


  /**
   * rappels create
   */
  export type rappelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * The data needed to create a rappels.
     */
    data: XOR<rappelsCreateInput, rappelsUncheckedCreateInput>
  }


  /**
   * rappels createMany
   */
  export type rappelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rappels.
     */
    data: rappelsCreateManyInput | rappelsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * rappels update
   */
  export type rappelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * The data needed to update a rappels.
     */
    data: XOR<rappelsUpdateInput, rappelsUncheckedUpdateInput>
    /**
     * Choose, which rappels to update.
     */
    where: rappelsWhereUniqueInput
  }


  /**
   * rappels updateMany
   */
  export type rappelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rappels.
     */
    data: XOR<rappelsUpdateManyMutationInput, rappelsUncheckedUpdateManyInput>
    /**
     * Filter which rappels to update
     */
    where?: rappelsWhereInput
  }


  /**
   * rappels upsert
   */
  export type rappelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * The filter to search for the rappels to update in case it exists.
     */
    where: rappelsWhereUniqueInput
    /**
     * In case the rappels found by the `where` argument doesn't exist, create a new rappels with this data.
     */
    create: XOR<rappelsCreateInput, rappelsUncheckedCreateInput>
    /**
     * In case the rappels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rappelsUpdateInput, rappelsUncheckedUpdateInput>
  }


  /**
   * rappels delete
   */
  export type rappelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
    /**
     * Filter which rappels to delete.
     */
    where: rappelsWhereUniqueInput
  }


  /**
   * rappels deleteMany
   */
  export type rappelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rappels to delete
     */
    where?: rappelsWhereInput
  }


  /**
   * rappels without action
   */
  export type rappelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rappels
     */
    select?: rappelsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rappelsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilisateursScalarFieldEnum: {
    prenom: 'prenom',
    nom: 'nom',
    email: 'email',
    password: 'password'
  };

  export type UtilisateursScalarFieldEnum = (typeof UtilisateursScalarFieldEnum)[keyof typeof UtilisateursScalarFieldEnum]


  export const GroupeScalarFieldEnum: {
    nom: 'nom',
    email_createur: 'email_createur'
  };

  export type GroupeScalarFieldEnum = (typeof GroupeScalarFieldEnum)[keyof typeof GroupeScalarFieldEnum]


  export const RappelsScalarFieldEnum: {
    nom_groupe: 'nom_groupe',
    nom_rappel: 'nom_rappel',
    description: 'description',
    date: 'date',
    email_createur: 'email_createur',
    time: 'time',
    couleur: 'couleur'
  };

  export type RappelsScalarFieldEnum = (typeof RappelsScalarFieldEnum)[keyof typeof RappelsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type utilisateursWhereInput = {
    AND?: utilisateursWhereInput | utilisateursWhereInput[]
    OR?: utilisateursWhereInput[]
    NOT?: utilisateursWhereInput | utilisateursWhereInput[]
    prenom?: StringFilter<"utilisateurs"> | string
    nom?: StringFilter<"utilisateurs"> | string
    email?: StringFilter<"utilisateurs"> | string
    password?: StringFilter<"utilisateurs"> | string
    Groupes_rejoints?: GroupeListRelationFilter
    Groupes_crees?: GroupeListRelationFilter
    rappels?: RappelsListRelationFilter
  }

  export type utilisateursOrderByWithRelationInput = {
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    Groupes_rejoints?: groupeOrderByRelationAggregateInput
    Groupes_crees?: groupeOrderByRelationAggregateInput
    rappels?: rappelsOrderByRelationAggregateInput
  }

  export type utilisateursWhereUniqueInput = Prisma.AtLeast<{
    email?: string
    AND?: utilisateursWhereInput | utilisateursWhereInput[]
    OR?: utilisateursWhereInput[]
    NOT?: utilisateursWhereInput | utilisateursWhereInput[]
    prenom?: StringFilter<"utilisateurs"> | string
    nom?: StringFilter<"utilisateurs"> | string
    password?: StringFilter<"utilisateurs"> | string
    Groupes_rejoints?: GroupeListRelationFilter
    Groupes_crees?: GroupeListRelationFilter
    rappels?: RappelsListRelationFilter
  }, "email">

  export type utilisateursOrderByWithAggregationInput = {
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: utilisateursCountOrderByAggregateInput
    _max?: utilisateursMaxOrderByAggregateInput
    _min?: utilisateursMinOrderByAggregateInput
  }

  export type utilisateursScalarWhereWithAggregatesInput = {
    AND?: utilisateursScalarWhereWithAggregatesInput | utilisateursScalarWhereWithAggregatesInput[]
    OR?: utilisateursScalarWhereWithAggregatesInput[]
    NOT?: utilisateursScalarWhereWithAggregatesInput | utilisateursScalarWhereWithAggregatesInput[]
    prenom?: StringWithAggregatesFilter<"utilisateurs"> | string
    nom?: StringWithAggregatesFilter<"utilisateurs"> | string
    email?: StringWithAggregatesFilter<"utilisateurs"> | string
    password?: StringWithAggregatesFilter<"utilisateurs"> | string
  }

  export type groupeWhereInput = {
    AND?: groupeWhereInput | groupeWhereInput[]
    OR?: groupeWhereInput[]
    NOT?: groupeWhereInput | groupeWhereInput[]
    nom?: StringFilter<"groupe"> | string
    email_createur?: StringFilter<"groupe"> | string
    Createur?: XOR<UtilisateursRelationFilter, utilisateursWhereInput>
    Rappel?: RappelsListRelationFilter
    Membres?: UtilisateursListRelationFilter
  }

  export type groupeOrderByWithRelationInput = {
    nom?: SortOrder
    email_createur?: SortOrder
    Createur?: utilisateursOrderByWithRelationInput
    Rappel?: rappelsOrderByRelationAggregateInput
    Membres?: utilisateursOrderByRelationAggregateInput
  }

  export type groupeWhereUniqueInput = Prisma.AtLeast<{
    nom?: string
    AND?: groupeWhereInput | groupeWhereInput[]
    OR?: groupeWhereInput[]
    NOT?: groupeWhereInput | groupeWhereInput[]
    email_createur?: StringFilter<"groupe"> | string
    Createur?: XOR<UtilisateursRelationFilter, utilisateursWhereInput>
    Rappel?: RappelsListRelationFilter
    Membres?: UtilisateursListRelationFilter
  }, "nom">

  export type groupeOrderByWithAggregationInput = {
    nom?: SortOrder
    email_createur?: SortOrder
    _count?: groupeCountOrderByAggregateInput
    _max?: groupeMaxOrderByAggregateInput
    _min?: groupeMinOrderByAggregateInput
  }

  export type groupeScalarWhereWithAggregatesInput = {
    AND?: groupeScalarWhereWithAggregatesInput | groupeScalarWhereWithAggregatesInput[]
    OR?: groupeScalarWhereWithAggregatesInput[]
    NOT?: groupeScalarWhereWithAggregatesInput | groupeScalarWhereWithAggregatesInput[]
    nom?: StringWithAggregatesFilter<"groupe"> | string
    email_createur?: StringWithAggregatesFilter<"groupe"> | string
  }

  export type rappelsWhereInput = {
    AND?: rappelsWhereInput | rappelsWhereInput[]
    OR?: rappelsWhereInput[]
    NOT?: rappelsWhereInput | rappelsWhereInput[]
    nom_groupe?: StringFilter<"rappels"> | string
    nom_rappel?: StringFilter<"rappels"> | string
    description?: StringFilter<"rappels"> | string
    date?: DateTimeFilter<"rappels"> | Date | string
    email_createur?: StringFilter<"rappels"> | string
    time?: DateTimeFilter<"rappels"> | Date | string
    couleur?: StringFilter<"rappels"> | string
    Groupe?: XOR<GroupeRelationFilter, groupeWhereInput>
    Createur?: XOR<UtilisateursRelationFilter, utilisateursWhereInput>
  }

  export type rappelsOrderByWithRelationInput = {
    nom_groupe?: SortOrder
    nom_rappel?: SortOrder
    description?: SortOrder
    date?: SortOrder
    email_createur?: SortOrder
    time?: SortOrder
    couleur?: SortOrder
    Groupe?: groupeOrderByWithRelationInput
    Createur?: utilisateursOrderByWithRelationInput
  }

  export type rappelsWhereUniqueInput = Prisma.AtLeast<{
    nom_groupe_nom_rappel?: rappelsNom_groupeNom_rappelCompoundUniqueInput
    AND?: rappelsWhereInput | rappelsWhereInput[]
    OR?: rappelsWhereInput[]
    NOT?: rappelsWhereInput | rappelsWhereInput[]
    nom_groupe?: StringFilter<"rappels"> | string
    nom_rappel?: StringFilter<"rappels"> | string
    description?: StringFilter<"rappels"> | string
    date?: DateTimeFilter<"rappels"> | Date | string
    email_createur?: StringFilter<"rappels"> | string
    time?: DateTimeFilter<"rappels"> | Date | string
    couleur?: StringFilter<"rappels"> | string
    Groupe?: XOR<GroupeRelationFilter, groupeWhereInput>
    Createur?: XOR<UtilisateursRelationFilter, utilisateursWhereInput>
  }, "nom_groupe_nom_rappel">

  export type rappelsOrderByWithAggregationInput = {
    nom_groupe?: SortOrder
    nom_rappel?: SortOrder
    description?: SortOrder
    date?: SortOrder
    email_createur?: SortOrder
    time?: SortOrder
    couleur?: SortOrder
    _count?: rappelsCountOrderByAggregateInput
    _max?: rappelsMaxOrderByAggregateInput
    _min?: rappelsMinOrderByAggregateInput
  }

  export type rappelsScalarWhereWithAggregatesInput = {
    AND?: rappelsScalarWhereWithAggregatesInput | rappelsScalarWhereWithAggregatesInput[]
    OR?: rappelsScalarWhereWithAggregatesInput[]
    NOT?: rappelsScalarWhereWithAggregatesInput | rappelsScalarWhereWithAggregatesInput[]
    nom_groupe?: StringWithAggregatesFilter<"rappels"> | string
    nom_rappel?: StringWithAggregatesFilter<"rappels"> | string
    description?: StringWithAggregatesFilter<"rappels"> | string
    date?: DateTimeWithAggregatesFilter<"rappels"> | Date | string
    email_createur?: StringWithAggregatesFilter<"rappels"> | string
    time?: DateTimeWithAggregatesFilter<"rappels"> | Date | string
    couleur?: StringWithAggregatesFilter<"rappels"> | string
  }

  export type utilisateursCreateInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_rejoints?: groupeCreateNestedManyWithoutMembresInput
    Groupes_crees?: groupeCreateNestedManyWithoutCreateurInput
    rappels?: rappelsCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursUncheckedCreateInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_rejoints?: groupeUncheckedCreateNestedManyWithoutMembresInput
    Groupes_crees?: groupeUncheckedCreateNestedManyWithoutCreateurInput
    rappels?: rappelsUncheckedCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursUpdateInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_rejoints?: groupeUpdateManyWithoutMembresNestedInput
    Groupes_crees?: groupeUpdateManyWithoutCreateurNestedInput
    rappels?: rappelsUpdateManyWithoutCreateurNestedInput
  }

  export type utilisateursUncheckedUpdateInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_rejoints?: groupeUncheckedUpdateManyWithoutMembresNestedInput
    Groupes_crees?: groupeUncheckedUpdateManyWithoutCreateurNestedInput
    rappels?: rappelsUncheckedUpdateManyWithoutCreateurNestedInput
  }

  export type utilisateursCreateManyInput = {
    prenom: string
    nom: string
    email: string
    password: string
  }

  export type utilisateursUpdateManyMutationInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type utilisateursUncheckedUpdateManyInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type groupeCreateInput = {
    nom: string
    Createur: utilisateursCreateNestedOneWithoutGroupes_creesInput
    Rappel?: rappelsCreateNestedManyWithoutGroupeInput
    Membres?: utilisateursCreateNestedManyWithoutGroupes_rejointsInput
  }

  export type groupeUncheckedCreateInput = {
    nom: string
    email_createur: string
    Rappel?: rappelsUncheckedCreateNestedManyWithoutGroupeInput
    Membres?: utilisateursUncheckedCreateNestedManyWithoutGroupes_rejointsInput
  }

  export type groupeUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    Createur?: utilisateursUpdateOneRequiredWithoutGroupes_creesNestedInput
    Rappel?: rappelsUpdateManyWithoutGroupeNestedInput
    Membres?: utilisateursUpdateManyWithoutGroupes_rejointsNestedInput
  }

  export type groupeUncheckedUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email_createur?: StringFieldUpdateOperationsInput | string
    Rappel?: rappelsUncheckedUpdateManyWithoutGroupeNestedInput
    Membres?: utilisateursUncheckedUpdateManyWithoutGroupes_rejointsNestedInput
  }

  export type groupeCreateManyInput = {
    nom: string
    email_createur: string
  }

  export type groupeUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type groupeUncheckedUpdateManyInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email_createur?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsCreateInput = {
    nom_rappel: string
    description: string
    date: Date | string
    time: Date | string
    couleur: string
    Groupe: groupeCreateNestedOneWithoutRappelInput
    Createur: utilisateursCreateNestedOneWithoutRappelsInput
  }

  export type rappelsUncheckedCreateInput = {
    nom_groupe: string
    nom_rappel: string
    description: string
    date: Date | string
    email_createur: string
    time: Date | string
    couleur: string
  }

  export type rappelsUpdateInput = {
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
    Groupe?: groupeUpdateOneRequiredWithoutRappelNestedInput
    Createur?: utilisateursUpdateOneRequiredWithoutRappelsNestedInput
  }

  export type rappelsUncheckedUpdateInput = {
    nom_groupe?: StringFieldUpdateOperationsInput | string
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    email_createur?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsCreateManyInput = {
    nom_groupe: string
    nom_rappel: string
    description: string
    date: Date | string
    email_createur: string
    time: Date | string
    couleur: string
  }

  export type rappelsUpdateManyMutationInput = {
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsUncheckedUpdateManyInput = {
    nom_groupe?: StringFieldUpdateOperationsInput | string
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    email_createur?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type GroupeListRelationFilter = {
    every?: groupeWhereInput
    some?: groupeWhereInput
    none?: groupeWhereInput
  }

  export type RappelsListRelationFilter = {
    every?: rappelsWhereInput
    some?: rappelsWhereInput
    none?: rappelsWhereInput
  }

  export type groupeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rappelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type utilisateursCountOrderByAggregateInput = {
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type utilisateursMaxOrderByAggregateInput = {
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type utilisateursMinOrderByAggregateInput = {
    prenom?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UtilisateursRelationFilter = {
    is?: utilisateursWhereInput
    isNot?: utilisateursWhereInput
  }

  export type UtilisateursListRelationFilter = {
    every?: utilisateursWhereInput
    some?: utilisateursWhereInput
    none?: utilisateursWhereInput
  }

  export type utilisateursOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type groupeCountOrderByAggregateInput = {
    nom?: SortOrder
    email_createur?: SortOrder
  }

  export type groupeMaxOrderByAggregateInput = {
    nom?: SortOrder
    email_createur?: SortOrder
  }

  export type groupeMinOrderByAggregateInput = {
    nom?: SortOrder
    email_createur?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GroupeRelationFilter = {
    is?: groupeWhereInput
    isNot?: groupeWhereInput
  }

  export type rappelsNom_groupeNom_rappelCompoundUniqueInput = {
    nom_groupe: string
    nom_rappel: string
  }

  export type rappelsCountOrderByAggregateInput = {
    nom_groupe?: SortOrder
    nom_rappel?: SortOrder
    description?: SortOrder
    date?: SortOrder
    email_createur?: SortOrder
    time?: SortOrder
    couleur?: SortOrder
  }

  export type rappelsMaxOrderByAggregateInput = {
    nom_groupe?: SortOrder
    nom_rappel?: SortOrder
    description?: SortOrder
    date?: SortOrder
    email_createur?: SortOrder
    time?: SortOrder
    couleur?: SortOrder
  }

  export type rappelsMinOrderByAggregateInput = {
    nom_groupe?: SortOrder
    nom_rappel?: SortOrder
    description?: SortOrder
    date?: SortOrder
    email_createur?: SortOrder
    time?: SortOrder
    couleur?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type groupeCreateNestedManyWithoutMembresInput = {
    create?: XOR<groupeCreateWithoutMembresInput, groupeUncheckedCreateWithoutMembresInput> | groupeCreateWithoutMembresInput[] | groupeUncheckedCreateWithoutMembresInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutMembresInput | groupeCreateOrConnectWithoutMembresInput[]
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
  }

  export type groupeCreateNestedManyWithoutCreateurInput = {
    create?: XOR<groupeCreateWithoutCreateurInput, groupeUncheckedCreateWithoutCreateurInput> | groupeCreateWithoutCreateurInput[] | groupeUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutCreateurInput | groupeCreateOrConnectWithoutCreateurInput[]
    createMany?: groupeCreateManyCreateurInputEnvelope
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
  }

  export type rappelsCreateNestedManyWithoutCreateurInput = {
    create?: XOR<rappelsCreateWithoutCreateurInput, rappelsUncheckedCreateWithoutCreateurInput> | rappelsCreateWithoutCreateurInput[] | rappelsUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutCreateurInput | rappelsCreateOrConnectWithoutCreateurInput[]
    createMany?: rappelsCreateManyCreateurInputEnvelope
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
  }

  export type groupeUncheckedCreateNestedManyWithoutMembresInput = {
    create?: XOR<groupeCreateWithoutMembresInput, groupeUncheckedCreateWithoutMembresInput> | groupeCreateWithoutMembresInput[] | groupeUncheckedCreateWithoutMembresInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutMembresInput | groupeCreateOrConnectWithoutMembresInput[]
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
  }

  export type groupeUncheckedCreateNestedManyWithoutCreateurInput = {
    create?: XOR<groupeCreateWithoutCreateurInput, groupeUncheckedCreateWithoutCreateurInput> | groupeCreateWithoutCreateurInput[] | groupeUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutCreateurInput | groupeCreateOrConnectWithoutCreateurInput[]
    createMany?: groupeCreateManyCreateurInputEnvelope
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
  }

  export type rappelsUncheckedCreateNestedManyWithoutCreateurInput = {
    create?: XOR<rappelsCreateWithoutCreateurInput, rappelsUncheckedCreateWithoutCreateurInput> | rappelsCreateWithoutCreateurInput[] | rappelsUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutCreateurInput | rappelsCreateOrConnectWithoutCreateurInput[]
    createMany?: rappelsCreateManyCreateurInputEnvelope
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type groupeUpdateManyWithoutMembresNestedInput = {
    create?: XOR<groupeCreateWithoutMembresInput, groupeUncheckedCreateWithoutMembresInput> | groupeCreateWithoutMembresInput[] | groupeUncheckedCreateWithoutMembresInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutMembresInput | groupeCreateOrConnectWithoutMembresInput[]
    upsert?: groupeUpsertWithWhereUniqueWithoutMembresInput | groupeUpsertWithWhereUniqueWithoutMembresInput[]
    set?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    disconnect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    delete?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    update?: groupeUpdateWithWhereUniqueWithoutMembresInput | groupeUpdateWithWhereUniqueWithoutMembresInput[]
    updateMany?: groupeUpdateManyWithWhereWithoutMembresInput | groupeUpdateManyWithWhereWithoutMembresInput[]
    deleteMany?: groupeScalarWhereInput | groupeScalarWhereInput[]
  }

  export type groupeUpdateManyWithoutCreateurNestedInput = {
    create?: XOR<groupeCreateWithoutCreateurInput, groupeUncheckedCreateWithoutCreateurInput> | groupeCreateWithoutCreateurInput[] | groupeUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutCreateurInput | groupeCreateOrConnectWithoutCreateurInput[]
    upsert?: groupeUpsertWithWhereUniqueWithoutCreateurInput | groupeUpsertWithWhereUniqueWithoutCreateurInput[]
    createMany?: groupeCreateManyCreateurInputEnvelope
    set?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    disconnect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    delete?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    update?: groupeUpdateWithWhereUniqueWithoutCreateurInput | groupeUpdateWithWhereUniqueWithoutCreateurInput[]
    updateMany?: groupeUpdateManyWithWhereWithoutCreateurInput | groupeUpdateManyWithWhereWithoutCreateurInput[]
    deleteMany?: groupeScalarWhereInput | groupeScalarWhereInput[]
  }

  export type rappelsUpdateManyWithoutCreateurNestedInput = {
    create?: XOR<rappelsCreateWithoutCreateurInput, rappelsUncheckedCreateWithoutCreateurInput> | rappelsCreateWithoutCreateurInput[] | rappelsUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutCreateurInput | rappelsCreateOrConnectWithoutCreateurInput[]
    upsert?: rappelsUpsertWithWhereUniqueWithoutCreateurInput | rappelsUpsertWithWhereUniqueWithoutCreateurInput[]
    createMany?: rappelsCreateManyCreateurInputEnvelope
    set?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    disconnect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    delete?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    update?: rappelsUpdateWithWhereUniqueWithoutCreateurInput | rappelsUpdateWithWhereUniqueWithoutCreateurInput[]
    updateMany?: rappelsUpdateManyWithWhereWithoutCreateurInput | rappelsUpdateManyWithWhereWithoutCreateurInput[]
    deleteMany?: rappelsScalarWhereInput | rappelsScalarWhereInput[]
  }

  export type groupeUncheckedUpdateManyWithoutMembresNestedInput = {
    create?: XOR<groupeCreateWithoutMembresInput, groupeUncheckedCreateWithoutMembresInput> | groupeCreateWithoutMembresInput[] | groupeUncheckedCreateWithoutMembresInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutMembresInput | groupeCreateOrConnectWithoutMembresInput[]
    upsert?: groupeUpsertWithWhereUniqueWithoutMembresInput | groupeUpsertWithWhereUniqueWithoutMembresInput[]
    set?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    disconnect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    delete?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    update?: groupeUpdateWithWhereUniqueWithoutMembresInput | groupeUpdateWithWhereUniqueWithoutMembresInput[]
    updateMany?: groupeUpdateManyWithWhereWithoutMembresInput | groupeUpdateManyWithWhereWithoutMembresInput[]
    deleteMany?: groupeScalarWhereInput | groupeScalarWhereInput[]
  }

  export type groupeUncheckedUpdateManyWithoutCreateurNestedInput = {
    create?: XOR<groupeCreateWithoutCreateurInput, groupeUncheckedCreateWithoutCreateurInput> | groupeCreateWithoutCreateurInput[] | groupeUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: groupeCreateOrConnectWithoutCreateurInput | groupeCreateOrConnectWithoutCreateurInput[]
    upsert?: groupeUpsertWithWhereUniqueWithoutCreateurInput | groupeUpsertWithWhereUniqueWithoutCreateurInput[]
    createMany?: groupeCreateManyCreateurInputEnvelope
    set?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    disconnect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    delete?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    connect?: groupeWhereUniqueInput | groupeWhereUniqueInput[]
    update?: groupeUpdateWithWhereUniqueWithoutCreateurInput | groupeUpdateWithWhereUniqueWithoutCreateurInput[]
    updateMany?: groupeUpdateManyWithWhereWithoutCreateurInput | groupeUpdateManyWithWhereWithoutCreateurInput[]
    deleteMany?: groupeScalarWhereInput | groupeScalarWhereInput[]
  }

  export type rappelsUncheckedUpdateManyWithoutCreateurNestedInput = {
    create?: XOR<rappelsCreateWithoutCreateurInput, rappelsUncheckedCreateWithoutCreateurInput> | rappelsCreateWithoutCreateurInput[] | rappelsUncheckedCreateWithoutCreateurInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutCreateurInput | rappelsCreateOrConnectWithoutCreateurInput[]
    upsert?: rappelsUpsertWithWhereUniqueWithoutCreateurInput | rappelsUpsertWithWhereUniqueWithoutCreateurInput[]
    createMany?: rappelsCreateManyCreateurInputEnvelope
    set?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    disconnect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    delete?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    update?: rappelsUpdateWithWhereUniqueWithoutCreateurInput | rappelsUpdateWithWhereUniqueWithoutCreateurInput[]
    updateMany?: rappelsUpdateManyWithWhereWithoutCreateurInput | rappelsUpdateManyWithWhereWithoutCreateurInput[]
    deleteMany?: rappelsScalarWhereInput | rappelsScalarWhereInput[]
  }

  export type utilisateursCreateNestedOneWithoutGroupes_creesInput = {
    create?: XOR<utilisateursCreateWithoutGroupes_creesInput, utilisateursUncheckedCreateWithoutGroupes_creesInput>
    connectOrCreate?: utilisateursCreateOrConnectWithoutGroupes_creesInput
    connect?: utilisateursWhereUniqueInput
  }

  export type rappelsCreateNestedManyWithoutGroupeInput = {
    create?: XOR<rappelsCreateWithoutGroupeInput, rappelsUncheckedCreateWithoutGroupeInput> | rappelsCreateWithoutGroupeInput[] | rappelsUncheckedCreateWithoutGroupeInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutGroupeInput | rappelsCreateOrConnectWithoutGroupeInput[]
    createMany?: rappelsCreateManyGroupeInputEnvelope
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
  }

  export type utilisateursCreateNestedManyWithoutGroupes_rejointsInput = {
    create?: XOR<utilisateursCreateWithoutGroupes_rejointsInput, utilisateursUncheckedCreateWithoutGroupes_rejointsInput> | utilisateursCreateWithoutGroupes_rejointsInput[] | utilisateursUncheckedCreateWithoutGroupes_rejointsInput[]
    connectOrCreate?: utilisateursCreateOrConnectWithoutGroupes_rejointsInput | utilisateursCreateOrConnectWithoutGroupes_rejointsInput[]
    connect?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
  }

  export type rappelsUncheckedCreateNestedManyWithoutGroupeInput = {
    create?: XOR<rappelsCreateWithoutGroupeInput, rappelsUncheckedCreateWithoutGroupeInput> | rappelsCreateWithoutGroupeInput[] | rappelsUncheckedCreateWithoutGroupeInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutGroupeInput | rappelsCreateOrConnectWithoutGroupeInput[]
    createMany?: rappelsCreateManyGroupeInputEnvelope
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
  }

  export type utilisateursUncheckedCreateNestedManyWithoutGroupes_rejointsInput = {
    create?: XOR<utilisateursCreateWithoutGroupes_rejointsInput, utilisateursUncheckedCreateWithoutGroupes_rejointsInput> | utilisateursCreateWithoutGroupes_rejointsInput[] | utilisateursUncheckedCreateWithoutGroupes_rejointsInput[]
    connectOrCreate?: utilisateursCreateOrConnectWithoutGroupes_rejointsInput | utilisateursCreateOrConnectWithoutGroupes_rejointsInput[]
    connect?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
  }

  export type utilisateursUpdateOneRequiredWithoutGroupes_creesNestedInput = {
    create?: XOR<utilisateursCreateWithoutGroupes_creesInput, utilisateursUncheckedCreateWithoutGroupes_creesInput>
    connectOrCreate?: utilisateursCreateOrConnectWithoutGroupes_creesInput
    upsert?: utilisateursUpsertWithoutGroupes_creesInput
    connect?: utilisateursWhereUniqueInput
    update?: XOR<XOR<utilisateursUpdateToOneWithWhereWithoutGroupes_creesInput, utilisateursUpdateWithoutGroupes_creesInput>, utilisateursUncheckedUpdateWithoutGroupes_creesInput>
  }

  export type rappelsUpdateManyWithoutGroupeNestedInput = {
    create?: XOR<rappelsCreateWithoutGroupeInput, rappelsUncheckedCreateWithoutGroupeInput> | rappelsCreateWithoutGroupeInput[] | rappelsUncheckedCreateWithoutGroupeInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutGroupeInput | rappelsCreateOrConnectWithoutGroupeInput[]
    upsert?: rappelsUpsertWithWhereUniqueWithoutGroupeInput | rappelsUpsertWithWhereUniqueWithoutGroupeInput[]
    createMany?: rappelsCreateManyGroupeInputEnvelope
    set?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    disconnect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    delete?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    update?: rappelsUpdateWithWhereUniqueWithoutGroupeInput | rappelsUpdateWithWhereUniqueWithoutGroupeInput[]
    updateMany?: rappelsUpdateManyWithWhereWithoutGroupeInput | rappelsUpdateManyWithWhereWithoutGroupeInput[]
    deleteMany?: rappelsScalarWhereInput | rappelsScalarWhereInput[]
  }

  export type utilisateursUpdateManyWithoutGroupes_rejointsNestedInput = {
    create?: XOR<utilisateursCreateWithoutGroupes_rejointsInput, utilisateursUncheckedCreateWithoutGroupes_rejointsInput> | utilisateursCreateWithoutGroupes_rejointsInput[] | utilisateursUncheckedCreateWithoutGroupes_rejointsInput[]
    connectOrCreate?: utilisateursCreateOrConnectWithoutGroupes_rejointsInput | utilisateursCreateOrConnectWithoutGroupes_rejointsInput[]
    upsert?: utilisateursUpsertWithWhereUniqueWithoutGroupes_rejointsInput | utilisateursUpsertWithWhereUniqueWithoutGroupes_rejointsInput[]
    set?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    disconnect?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    delete?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    connect?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    update?: utilisateursUpdateWithWhereUniqueWithoutGroupes_rejointsInput | utilisateursUpdateWithWhereUniqueWithoutGroupes_rejointsInput[]
    updateMany?: utilisateursUpdateManyWithWhereWithoutGroupes_rejointsInput | utilisateursUpdateManyWithWhereWithoutGroupes_rejointsInput[]
    deleteMany?: utilisateursScalarWhereInput | utilisateursScalarWhereInput[]
  }

  export type rappelsUncheckedUpdateManyWithoutGroupeNestedInput = {
    create?: XOR<rappelsCreateWithoutGroupeInput, rappelsUncheckedCreateWithoutGroupeInput> | rappelsCreateWithoutGroupeInput[] | rappelsUncheckedCreateWithoutGroupeInput[]
    connectOrCreate?: rappelsCreateOrConnectWithoutGroupeInput | rappelsCreateOrConnectWithoutGroupeInput[]
    upsert?: rappelsUpsertWithWhereUniqueWithoutGroupeInput | rappelsUpsertWithWhereUniqueWithoutGroupeInput[]
    createMany?: rappelsCreateManyGroupeInputEnvelope
    set?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    disconnect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    delete?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    connect?: rappelsWhereUniqueInput | rappelsWhereUniqueInput[]
    update?: rappelsUpdateWithWhereUniqueWithoutGroupeInput | rappelsUpdateWithWhereUniqueWithoutGroupeInput[]
    updateMany?: rappelsUpdateManyWithWhereWithoutGroupeInput | rappelsUpdateManyWithWhereWithoutGroupeInput[]
    deleteMany?: rappelsScalarWhereInput | rappelsScalarWhereInput[]
  }

  export type utilisateursUncheckedUpdateManyWithoutGroupes_rejointsNestedInput = {
    create?: XOR<utilisateursCreateWithoutGroupes_rejointsInput, utilisateursUncheckedCreateWithoutGroupes_rejointsInput> | utilisateursCreateWithoutGroupes_rejointsInput[] | utilisateursUncheckedCreateWithoutGroupes_rejointsInput[]
    connectOrCreate?: utilisateursCreateOrConnectWithoutGroupes_rejointsInput | utilisateursCreateOrConnectWithoutGroupes_rejointsInput[]
    upsert?: utilisateursUpsertWithWhereUniqueWithoutGroupes_rejointsInput | utilisateursUpsertWithWhereUniqueWithoutGroupes_rejointsInput[]
    set?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    disconnect?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    delete?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    connect?: utilisateursWhereUniqueInput | utilisateursWhereUniqueInput[]
    update?: utilisateursUpdateWithWhereUniqueWithoutGroupes_rejointsInput | utilisateursUpdateWithWhereUniqueWithoutGroupes_rejointsInput[]
    updateMany?: utilisateursUpdateManyWithWhereWithoutGroupes_rejointsInput | utilisateursUpdateManyWithWhereWithoutGroupes_rejointsInput[]
    deleteMany?: utilisateursScalarWhereInput | utilisateursScalarWhereInput[]
  }

  export type groupeCreateNestedOneWithoutRappelInput = {
    create?: XOR<groupeCreateWithoutRappelInput, groupeUncheckedCreateWithoutRappelInput>
    connectOrCreate?: groupeCreateOrConnectWithoutRappelInput
    connect?: groupeWhereUniqueInput
  }

  export type utilisateursCreateNestedOneWithoutRappelsInput = {
    create?: XOR<utilisateursCreateWithoutRappelsInput, utilisateursUncheckedCreateWithoutRappelsInput>
    connectOrCreate?: utilisateursCreateOrConnectWithoutRappelsInput
    connect?: utilisateursWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type groupeUpdateOneRequiredWithoutRappelNestedInput = {
    create?: XOR<groupeCreateWithoutRappelInput, groupeUncheckedCreateWithoutRappelInput>
    connectOrCreate?: groupeCreateOrConnectWithoutRappelInput
    upsert?: groupeUpsertWithoutRappelInput
    connect?: groupeWhereUniqueInput
    update?: XOR<XOR<groupeUpdateToOneWithWhereWithoutRappelInput, groupeUpdateWithoutRappelInput>, groupeUncheckedUpdateWithoutRappelInput>
  }

  export type utilisateursUpdateOneRequiredWithoutRappelsNestedInput = {
    create?: XOR<utilisateursCreateWithoutRappelsInput, utilisateursUncheckedCreateWithoutRappelsInput>
    connectOrCreate?: utilisateursCreateOrConnectWithoutRappelsInput
    upsert?: utilisateursUpsertWithoutRappelsInput
    connect?: utilisateursWhereUniqueInput
    update?: XOR<XOR<utilisateursUpdateToOneWithWhereWithoutRappelsInput, utilisateursUpdateWithoutRappelsInput>, utilisateursUncheckedUpdateWithoutRappelsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type groupeCreateWithoutMembresInput = {
    nom: string
    Createur: utilisateursCreateNestedOneWithoutGroupes_creesInput
    Rappel?: rappelsCreateNestedManyWithoutGroupeInput
  }

  export type groupeUncheckedCreateWithoutMembresInput = {
    nom: string
    email_createur: string
    Rappel?: rappelsUncheckedCreateNestedManyWithoutGroupeInput
  }

  export type groupeCreateOrConnectWithoutMembresInput = {
    where: groupeWhereUniqueInput
    create: XOR<groupeCreateWithoutMembresInput, groupeUncheckedCreateWithoutMembresInput>
  }

  export type groupeCreateWithoutCreateurInput = {
    nom: string
    Rappel?: rappelsCreateNestedManyWithoutGroupeInput
    Membres?: utilisateursCreateNestedManyWithoutGroupes_rejointsInput
  }

  export type groupeUncheckedCreateWithoutCreateurInput = {
    nom: string
    Rappel?: rappelsUncheckedCreateNestedManyWithoutGroupeInput
    Membres?: utilisateursUncheckedCreateNestedManyWithoutGroupes_rejointsInput
  }

  export type groupeCreateOrConnectWithoutCreateurInput = {
    where: groupeWhereUniqueInput
    create: XOR<groupeCreateWithoutCreateurInput, groupeUncheckedCreateWithoutCreateurInput>
  }

  export type groupeCreateManyCreateurInputEnvelope = {
    data: groupeCreateManyCreateurInput | groupeCreateManyCreateurInput[]
    skipDuplicates?: boolean
  }

  export type rappelsCreateWithoutCreateurInput = {
    nom_rappel: string
    description: string
    date: Date | string
    time: Date | string
    couleur: string
    Groupe: groupeCreateNestedOneWithoutRappelInput
  }

  export type rappelsUncheckedCreateWithoutCreateurInput = {
    nom_groupe: string
    nom_rappel: string
    description: string
    date: Date | string
    time: Date | string
    couleur: string
  }

  export type rappelsCreateOrConnectWithoutCreateurInput = {
    where: rappelsWhereUniqueInput
    create: XOR<rappelsCreateWithoutCreateurInput, rappelsUncheckedCreateWithoutCreateurInput>
  }

  export type rappelsCreateManyCreateurInputEnvelope = {
    data: rappelsCreateManyCreateurInput | rappelsCreateManyCreateurInput[]
    skipDuplicates?: boolean
  }

  export type groupeUpsertWithWhereUniqueWithoutMembresInput = {
    where: groupeWhereUniqueInput
    update: XOR<groupeUpdateWithoutMembresInput, groupeUncheckedUpdateWithoutMembresInput>
    create: XOR<groupeCreateWithoutMembresInput, groupeUncheckedCreateWithoutMembresInput>
  }

  export type groupeUpdateWithWhereUniqueWithoutMembresInput = {
    where: groupeWhereUniqueInput
    data: XOR<groupeUpdateWithoutMembresInput, groupeUncheckedUpdateWithoutMembresInput>
  }

  export type groupeUpdateManyWithWhereWithoutMembresInput = {
    where: groupeScalarWhereInput
    data: XOR<groupeUpdateManyMutationInput, groupeUncheckedUpdateManyWithoutMembresInput>
  }

  export type groupeScalarWhereInput = {
    AND?: groupeScalarWhereInput | groupeScalarWhereInput[]
    OR?: groupeScalarWhereInput[]
    NOT?: groupeScalarWhereInput | groupeScalarWhereInput[]
    nom?: StringFilter<"groupe"> | string
    email_createur?: StringFilter<"groupe"> | string
  }

  export type groupeUpsertWithWhereUniqueWithoutCreateurInput = {
    where: groupeWhereUniqueInput
    update: XOR<groupeUpdateWithoutCreateurInput, groupeUncheckedUpdateWithoutCreateurInput>
    create: XOR<groupeCreateWithoutCreateurInput, groupeUncheckedCreateWithoutCreateurInput>
  }

  export type groupeUpdateWithWhereUniqueWithoutCreateurInput = {
    where: groupeWhereUniqueInput
    data: XOR<groupeUpdateWithoutCreateurInput, groupeUncheckedUpdateWithoutCreateurInput>
  }

  export type groupeUpdateManyWithWhereWithoutCreateurInput = {
    where: groupeScalarWhereInput
    data: XOR<groupeUpdateManyMutationInput, groupeUncheckedUpdateManyWithoutCreateurInput>
  }

  export type rappelsUpsertWithWhereUniqueWithoutCreateurInput = {
    where: rappelsWhereUniqueInput
    update: XOR<rappelsUpdateWithoutCreateurInput, rappelsUncheckedUpdateWithoutCreateurInput>
    create: XOR<rappelsCreateWithoutCreateurInput, rappelsUncheckedCreateWithoutCreateurInput>
  }

  export type rappelsUpdateWithWhereUniqueWithoutCreateurInput = {
    where: rappelsWhereUniqueInput
    data: XOR<rappelsUpdateWithoutCreateurInput, rappelsUncheckedUpdateWithoutCreateurInput>
  }

  export type rappelsUpdateManyWithWhereWithoutCreateurInput = {
    where: rappelsScalarWhereInput
    data: XOR<rappelsUpdateManyMutationInput, rappelsUncheckedUpdateManyWithoutCreateurInput>
  }

  export type rappelsScalarWhereInput = {
    AND?: rappelsScalarWhereInput | rappelsScalarWhereInput[]
    OR?: rappelsScalarWhereInput[]
    NOT?: rappelsScalarWhereInput | rappelsScalarWhereInput[]
    nom_groupe?: StringFilter<"rappels"> | string
    nom_rappel?: StringFilter<"rappels"> | string
    description?: StringFilter<"rappels"> | string
    date?: DateTimeFilter<"rappels"> | Date | string
    email_createur?: StringFilter<"rappels"> | string
    time?: DateTimeFilter<"rappels"> | Date | string
    couleur?: StringFilter<"rappels"> | string
  }

  export type utilisateursCreateWithoutGroupes_creesInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_rejoints?: groupeCreateNestedManyWithoutMembresInput
    rappels?: rappelsCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursUncheckedCreateWithoutGroupes_creesInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_rejoints?: groupeUncheckedCreateNestedManyWithoutMembresInput
    rappels?: rappelsUncheckedCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursCreateOrConnectWithoutGroupes_creesInput = {
    where: utilisateursWhereUniqueInput
    create: XOR<utilisateursCreateWithoutGroupes_creesInput, utilisateursUncheckedCreateWithoutGroupes_creesInput>
  }

  export type rappelsCreateWithoutGroupeInput = {
    nom_rappel: string
    description: string
    date: Date | string
    time: Date | string
    couleur: string
    Createur: utilisateursCreateNestedOneWithoutRappelsInput
  }

  export type rappelsUncheckedCreateWithoutGroupeInput = {
    nom_rappel: string
    description: string
    date: Date | string
    email_createur: string
    time: Date | string
    couleur: string
  }

  export type rappelsCreateOrConnectWithoutGroupeInput = {
    where: rappelsWhereUniqueInput
    create: XOR<rappelsCreateWithoutGroupeInput, rappelsUncheckedCreateWithoutGroupeInput>
  }

  export type rappelsCreateManyGroupeInputEnvelope = {
    data: rappelsCreateManyGroupeInput | rappelsCreateManyGroupeInput[]
    skipDuplicates?: boolean
  }

  export type utilisateursCreateWithoutGroupes_rejointsInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_crees?: groupeCreateNestedManyWithoutCreateurInput
    rappels?: rappelsCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursUncheckedCreateWithoutGroupes_rejointsInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_crees?: groupeUncheckedCreateNestedManyWithoutCreateurInput
    rappels?: rappelsUncheckedCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursCreateOrConnectWithoutGroupes_rejointsInput = {
    where: utilisateursWhereUniqueInput
    create: XOR<utilisateursCreateWithoutGroupes_rejointsInput, utilisateursUncheckedCreateWithoutGroupes_rejointsInput>
  }

  export type utilisateursUpsertWithoutGroupes_creesInput = {
    update: XOR<utilisateursUpdateWithoutGroupes_creesInput, utilisateursUncheckedUpdateWithoutGroupes_creesInput>
    create: XOR<utilisateursCreateWithoutGroupes_creesInput, utilisateursUncheckedCreateWithoutGroupes_creesInput>
    where?: utilisateursWhereInput
  }

  export type utilisateursUpdateToOneWithWhereWithoutGroupes_creesInput = {
    where?: utilisateursWhereInput
    data: XOR<utilisateursUpdateWithoutGroupes_creesInput, utilisateursUncheckedUpdateWithoutGroupes_creesInput>
  }

  export type utilisateursUpdateWithoutGroupes_creesInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_rejoints?: groupeUpdateManyWithoutMembresNestedInput
    rappels?: rappelsUpdateManyWithoutCreateurNestedInput
  }

  export type utilisateursUncheckedUpdateWithoutGroupes_creesInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_rejoints?: groupeUncheckedUpdateManyWithoutMembresNestedInput
    rappels?: rappelsUncheckedUpdateManyWithoutCreateurNestedInput
  }

  export type rappelsUpsertWithWhereUniqueWithoutGroupeInput = {
    where: rappelsWhereUniqueInput
    update: XOR<rappelsUpdateWithoutGroupeInput, rappelsUncheckedUpdateWithoutGroupeInput>
    create: XOR<rappelsCreateWithoutGroupeInput, rappelsUncheckedCreateWithoutGroupeInput>
  }

  export type rappelsUpdateWithWhereUniqueWithoutGroupeInput = {
    where: rappelsWhereUniqueInput
    data: XOR<rappelsUpdateWithoutGroupeInput, rappelsUncheckedUpdateWithoutGroupeInput>
  }

  export type rappelsUpdateManyWithWhereWithoutGroupeInput = {
    where: rappelsScalarWhereInput
    data: XOR<rappelsUpdateManyMutationInput, rappelsUncheckedUpdateManyWithoutGroupeInput>
  }

  export type utilisateursUpsertWithWhereUniqueWithoutGroupes_rejointsInput = {
    where: utilisateursWhereUniqueInput
    update: XOR<utilisateursUpdateWithoutGroupes_rejointsInput, utilisateursUncheckedUpdateWithoutGroupes_rejointsInput>
    create: XOR<utilisateursCreateWithoutGroupes_rejointsInput, utilisateursUncheckedCreateWithoutGroupes_rejointsInput>
  }

  export type utilisateursUpdateWithWhereUniqueWithoutGroupes_rejointsInput = {
    where: utilisateursWhereUniqueInput
    data: XOR<utilisateursUpdateWithoutGroupes_rejointsInput, utilisateursUncheckedUpdateWithoutGroupes_rejointsInput>
  }

  export type utilisateursUpdateManyWithWhereWithoutGroupes_rejointsInput = {
    where: utilisateursScalarWhereInput
    data: XOR<utilisateursUpdateManyMutationInput, utilisateursUncheckedUpdateManyWithoutGroupes_rejointsInput>
  }

  export type utilisateursScalarWhereInput = {
    AND?: utilisateursScalarWhereInput | utilisateursScalarWhereInput[]
    OR?: utilisateursScalarWhereInput[]
    NOT?: utilisateursScalarWhereInput | utilisateursScalarWhereInput[]
    prenom?: StringFilter<"utilisateurs"> | string
    nom?: StringFilter<"utilisateurs"> | string
    email?: StringFilter<"utilisateurs"> | string
    password?: StringFilter<"utilisateurs"> | string
  }

  export type groupeCreateWithoutRappelInput = {
    nom: string
    Createur: utilisateursCreateNestedOneWithoutGroupes_creesInput
    Membres?: utilisateursCreateNestedManyWithoutGroupes_rejointsInput
  }

  export type groupeUncheckedCreateWithoutRappelInput = {
    nom: string
    email_createur: string
    Membres?: utilisateursUncheckedCreateNestedManyWithoutGroupes_rejointsInput
  }

  export type groupeCreateOrConnectWithoutRappelInput = {
    where: groupeWhereUniqueInput
    create: XOR<groupeCreateWithoutRappelInput, groupeUncheckedCreateWithoutRappelInput>
  }

  export type utilisateursCreateWithoutRappelsInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_rejoints?: groupeCreateNestedManyWithoutMembresInput
    Groupes_crees?: groupeCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursUncheckedCreateWithoutRappelsInput = {
    prenom: string
    nom: string
    email: string
    password: string
    Groupes_rejoints?: groupeUncheckedCreateNestedManyWithoutMembresInput
    Groupes_crees?: groupeUncheckedCreateNestedManyWithoutCreateurInput
  }

  export type utilisateursCreateOrConnectWithoutRappelsInput = {
    where: utilisateursWhereUniqueInput
    create: XOR<utilisateursCreateWithoutRappelsInput, utilisateursUncheckedCreateWithoutRappelsInput>
  }

  export type groupeUpsertWithoutRappelInput = {
    update: XOR<groupeUpdateWithoutRappelInput, groupeUncheckedUpdateWithoutRappelInput>
    create: XOR<groupeCreateWithoutRappelInput, groupeUncheckedCreateWithoutRappelInput>
    where?: groupeWhereInput
  }

  export type groupeUpdateToOneWithWhereWithoutRappelInput = {
    where?: groupeWhereInput
    data: XOR<groupeUpdateWithoutRappelInput, groupeUncheckedUpdateWithoutRappelInput>
  }

  export type groupeUpdateWithoutRappelInput = {
    nom?: StringFieldUpdateOperationsInput | string
    Createur?: utilisateursUpdateOneRequiredWithoutGroupes_creesNestedInput
    Membres?: utilisateursUpdateManyWithoutGroupes_rejointsNestedInput
  }

  export type groupeUncheckedUpdateWithoutRappelInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email_createur?: StringFieldUpdateOperationsInput | string
    Membres?: utilisateursUncheckedUpdateManyWithoutGroupes_rejointsNestedInput
  }

  export type utilisateursUpsertWithoutRappelsInput = {
    update: XOR<utilisateursUpdateWithoutRappelsInput, utilisateursUncheckedUpdateWithoutRappelsInput>
    create: XOR<utilisateursCreateWithoutRappelsInput, utilisateursUncheckedCreateWithoutRappelsInput>
    where?: utilisateursWhereInput
  }

  export type utilisateursUpdateToOneWithWhereWithoutRappelsInput = {
    where?: utilisateursWhereInput
    data: XOR<utilisateursUpdateWithoutRappelsInput, utilisateursUncheckedUpdateWithoutRappelsInput>
  }

  export type utilisateursUpdateWithoutRappelsInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_rejoints?: groupeUpdateManyWithoutMembresNestedInput
    Groupes_crees?: groupeUpdateManyWithoutCreateurNestedInput
  }

  export type utilisateursUncheckedUpdateWithoutRappelsInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_rejoints?: groupeUncheckedUpdateManyWithoutMembresNestedInput
    Groupes_crees?: groupeUncheckedUpdateManyWithoutCreateurNestedInput
  }

  export type groupeCreateManyCreateurInput = {
    nom: string
  }

  export type rappelsCreateManyCreateurInput = {
    nom_groupe: string
    nom_rappel: string
    description: string
    date: Date | string
    time: Date | string
    couleur: string
  }

  export type groupeUpdateWithoutMembresInput = {
    nom?: StringFieldUpdateOperationsInput | string
    Createur?: utilisateursUpdateOneRequiredWithoutGroupes_creesNestedInput
    Rappel?: rappelsUpdateManyWithoutGroupeNestedInput
  }

  export type groupeUncheckedUpdateWithoutMembresInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email_createur?: StringFieldUpdateOperationsInput | string
    Rappel?: rappelsUncheckedUpdateManyWithoutGroupeNestedInput
  }

  export type groupeUncheckedUpdateManyWithoutMembresInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email_createur?: StringFieldUpdateOperationsInput | string
  }

  export type groupeUpdateWithoutCreateurInput = {
    nom?: StringFieldUpdateOperationsInput | string
    Rappel?: rappelsUpdateManyWithoutGroupeNestedInput
    Membres?: utilisateursUpdateManyWithoutGroupes_rejointsNestedInput
  }

  export type groupeUncheckedUpdateWithoutCreateurInput = {
    nom?: StringFieldUpdateOperationsInput | string
    Rappel?: rappelsUncheckedUpdateManyWithoutGroupeNestedInput
    Membres?: utilisateursUncheckedUpdateManyWithoutGroupes_rejointsNestedInput
  }

  export type groupeUncheckedUpdateManyWithoutCreateurInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsUpdateWithoutCreateurInput = {
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
    Groupe?: groupeUpdateOneRequiredWithoutRappelNestedInput
  }

  export type rappelsUncheckedUpdateWithoutCreateurInput = {
    nom_groupe?: StringFieldUpdateOperationsInput | string
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsUncheckedUpdateManyWithoutCreateurInput = {
    nom_groupe?: StringFieldUpdateOperationsInput | string
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsCreateManyGroupeInput = {
    nom_rappel: string
    description: string
    date: Date | string
    email_createur: string
    time: Date | string
    couleur: string
  }

  export type rappelsUpdateWithoutGroupeInput = {
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
    Createur?: utilisateursUpdateOneRequiredWithoutRappelsNestedInput
  }

  export type rappelsUncheckedUpdateWithoutGroupeInput = {
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    email_createur?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type rappelsUncheckedUpdateManyWithoutGroupeInput = {
    nom_rappel?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    email_createur?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    couleur?: StringFieldUpdateOperationsInput | string
  }

  export type utilisateursUpdateWithoutGroupes_rejointsInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_crees?: groupeUpdateManyWithoutCreateurNestedInput
    rappels?: rappelsUpdateManyWithoutCreateurNestedInput
  }

  export type utilisateursUncheckedUpdateWithoutGroupes_rejointsInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Groupes_crees?: groupeUncheckedUpdateManyWithoutCreateurNestedInput
    rappels?: rappelsUncheckedUpdateManyWithoutCreateurNestedInput
  }

  export type utilisateursUncheckedUpdateManyWithoutGroupes_rejointsInput = {
    prenom?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UtilisateursCountOutputTypeDefaultArgs instead
     */
    export type UtilisateursCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateursCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupeCountOutputTypeDefaultArgs instead
     */
    export type GroupeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use utilisateursDefaultArgs instead
     */
    export type utilisateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = utilisateursDefaultArgs<ExtArgs>
    /**
     * @deprecated Use groupeDefaultArgs instead
     */
    export type groupeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = groupeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use rappelsDefaultArgs instead
     */
    export type rappelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = rappelsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}